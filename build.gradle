import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinMultiplatformPlugin

import javax.annotation.Nullable

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.4.18"
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.14.2")
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }

    plugins.apply("io.gitlab.arturbosch.detekt")

    detekt {
        toolVersion = "1.14.2"
        config = files("$rootDir/detekt.yml")
    }

    // Workaround until Detekt is updated: https://github.com/detekt/detekt/issues/3840.
    // The current version depends on kotlinx-html-jvm:0.7.2 which is not in Maven Central.
    configurations.detekt {
        resolutionStrategy {
            force("org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.3")
        }
    }
}

boolean setupMultiplatform(Project project, List<Target> targets = Target.values().toList()) {
    setRequiredTargets(project, targets)

    if (!targets.any { isTargetEnabled(project, it) }) {
        return false
    }

    doIfAndroidEnabled(project) {
        if (Target.ANDROID in targets) {
            project.plugins.apply("com.android.library")
        }
    }

    project.plugins.apply("kotlin-multiplatform")

    setupMultiplatformCommon(project)

    doIfAndroidEnabled(project) {
        setupMultiplatformAndroid(project)
        setupAndroid(project)
    }

    doIfJvmEnabled(project) {
        setupMultiplatformJvm(project)
    }

    doIfLinuxX64Enabled(project) {
        setupMultiplatformLinuxX64(project)
    }

    doIfIosEnabled(project) {
        setupMultiplatformIos(project)
    }

    doIfWatchosEnabled(project) {
        setupMultiplatformWatchos(project)
    }

    doIfMacosX64Enabled(project) {
        setupMultiplatformMacosX64(project)
    }

    doIfJsEnabled(project) {
        setupMultiplatformJs(project, Target.JS_IR in targets, Target.JS_LEGACY in targets)
    }

    return true
}

private void setupMultiplatformCommon(Project project) {
    project.kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin("stdlib")
                }
            }

            commonTest {
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
                }
            }

            jvmJsMain {
                dependsOn commonMain
            }

            jvmJsTest {
                dependsOn commonTest
            }

            jsNativeMain {
                dependsOn commonMain
            }

            jsNativeTest {
                dependsOn commonTest
            }

            jvmNativeMain {
                dependsOn commonMain
            }

            jvmNativeTest {
                dependsOn commonTest
            }

            javaMain {
                dependsOn jvmJsMain
                dependsOn jvmNativeMain
            }

            javaTest {
                dependsOn jvmJsTest
                dependsOn jvmNativeTest
            }

            nativeMain {
                dependsOn jsNativeMain
                dependsOn jvmNativeMain
            }

            nativeTest {
                dependsOn jsNativeTest
                dependsOn jvmNativeTest
            }

            darwinMain {
                dependsOn nativeMain
            }

            darwinTest {
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformAndroid(Project project) {
    project.kotlin {
        android()

        sourceSets {
            androidMain {
                dependsOn javaMain
            }

            androidTest {
                dependsOn javaTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
                }
            }
        }
    }
}

private void setupMultiplatformJvm(Project project) {
    project.kotlin {
        jvm()

        sourceSets {
            jvmMain {
                dependsOn javaMain
            }

            jvmTest {
                dependsOn javaTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
                }
            }
        }
    }
}

private void setupMultiplatformLinuxX64(Project project) {
    project.kotlin {
        linuxX64()

        sourceSets {
            linuxX64Main {
                dependsOn nativeMain
            }

            linuxX64Test {
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformIos(Project project) {
    project.kotlin {
        ios()

        sourceSets {
            iosMain {
                dependsOn darwinMain
            }

            iosTest {
                dependsOn darwinTest
            }
        }
    }
}

private void setupMultiplatformWatchos(Project project) {
    project.kotlin {
        watchos()

        sourceSets {
            watchosMain {
                dependsOn darwinMain
            }

            watchosTest {
                dependsOn darwinTest
            }
        }
    }
}

private void setupMultiplatformMacosX64(Project project) {
    project.kotlin {
        macosX64()

        sourceSets {
            macosX64Main {
                dependsOn darwinMain
            }

            macosX64Test {
                dependsOn darwinTest
            }
        }
    }
}

private void setupMultiplatformJs(Project project, boolean isIr, boolean isLegacy) {
    project.kotlin {
        js(isIr ? (isLegacy ? BOTH : IR) : LEGACY) {
            browser()
            nodejs()
        }

        sourceSets {
            jsMain {
                dependsOn jvmJsMain
                dependsOn jsNativeMain
            }

            jsTest {
                dependsOn jvmJsTest
                dependsOn jsNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
                }
            }
        }
    }
}

private void setupAndroid(Project project) {
    project.android {
        compileSdkVersion 29

        defaultConfig {
            minSdkVersion 15
            targetSdkVersion 29
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

void setupMultiplatformPublications(Project project) {
    project.with {
        plugins.apply('maven-publish')

        group = "com.arkivanov.mvikotlin"
        version = mvikotlinVersion

        publishing {
            publications.withType(MavenPublication.class).all {
                setupPublicationPom(project, it)
            }
        }

        setupPublicationRepository(project)

        final isMetadata = System.getProperty("publish_metadata") != null
        final metadataPublicationNames = [KotlinMultiplatformPlugin.METADATA_TARGET_NAME, "kotlinMultiplatform"]

        tasks.withType(PublishToMavenRepository.class).all {
            it.enabled = (it.publication?.name in metadataPublicationNames) == isMetadata
        }

        doIfAndroidEnabled(project) {
            kotlin {
                android {
                    publishLibraryVariants("release", "debug")
                }
            }
        }
    }
}

void setupPublicationPom(Project project, Publication publication) {
    Task javadocJar = project.tasks.findByName("javadocJar")
    if (javadocJar == null) {
        javadocJar =
                project.task("javadocJar", type: Jar) {
                    archiveClassifier.set("javadoc")
                }
    }

    publication.with {
        artifact javadocJar

        pom {
            name = "MVIKotlin"
            description = "Kotlin Multiplatform MVI framework"
            url = "https://github.com/arkivanov/MVIKotlin"

            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }

            developers {
                developer {
                    id = "arkivanov"
                    name = "Arkadii Ivanov"
                    email = "arkann1985@gmail.com"
                }
            }

            scm {
                url = "https://github.com/arkivanov/MVIKotlin"
                connection = "scm:git:git://github.com/arkivanov/MVIKotlin.git"
                developerConnection = "scm:git:git://github.com/arkivanov/MVIKotlin.git"
            }
        }
    }
}

private void setupPublicationRepository(Project project) {
    project.with {
        plugins.apply("signing")

        publishing {
            signing {
                useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
                sign(publications)
            }

            repositories {
                maven {
                    url = "https://oss.sonatype.org/service/local/staging/deployByRepositoryId/${System.getenv("SONATYPE_REPOSITORY_ID")}"
                    credentials {
                        username = "arkivanov"
                        password = System.getenv("SONATYPE_PASSWORD")
                    }
                }
            }
        }
    }
}

static void doIfAndroidEnabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.ANDROID)) {
        block()
    }
}

static void doIfJvmEnabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.JVM)) {
        block()
    }
}

static void doIfJsEnabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.JS_LEGACY) || isTargetEnabled(project, Target.JS_IR)) {
        block()
    }
}

static void doIfLinuxX64Enabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.LINUX_X64)) {
        block()
    }
}

static void doIfIosEnabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.IOS)) {
        block()
    }
}

static void doIfWatchosEnabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.WATCHOS)) {
        block()
    }
}

static void doIfMacosX64Enabled(Project project, Closure block) {
    if (isTargetEnabled(project, Target.MACOS_X64)) {
        block()
    }
}

static boolean isTargetEnabled(Project project, Target target) {
    final Set<Target> requiredTargets = getRequiredTargets(project) ?: getAllTargets()

    return isTargetEnabled(target) && requiredTargets.contains(target)
}

static boolean isTargetEnabled(Target target) {
    return getEnabledTargets().contains(target)
}

private static void setRequiredTargets(Project project, Collection<Target> targets) {
    project.ext.required_targets = new HashSet(targets)
}

@Nullable
private static Set<Target> getRequiredTargets(Project project) {
    return project.ext.required_targets
}

private static Set<Target> getEnabledTargets() {
    return System.getProperty("targets")
            ?.split(",")
            ?.collect(new HashSet(), Target.&valueOf)
            ?: getAllTargets()
}

private static Set<Target> getAllTargets() {
    return EnumSet.allOf(Target.class)
}

